org: nikso
app: proma
service: proma-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: nikso-serverless
  region: ${opt:region, eu-west-1)
  stage: ${opt:stage, dev}
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  environment:
    S3_PROJECT_DATA_BUCKET: ${self:provider.stage}-proma-projects-data
    DYNAMODB_HOSTS_TABLE: ${self:provider.stage}-hosts
    DYNAMODB_FUNCTIONS_TABLE: ${self:provider.stage}-functions

functions:
  auth:
    handler: src/lib/authorizer.handler
  run:
    handler: src/run.handler
    events:
      - http:
          method: get
          path: /run/{user}/{project}/{func}
          # authorizer: ${self:custom.authorizer}
          request:
            parameters:
              paths:
                user: true
                project: true
                func: true
    iamRoleStatements:
      - Effect: 'Allow'
        Actions:
          - dynamodb:Get
        Resource:
          - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_FUNCTIONS_TABLE}'

resources:
  Resources:
    projectsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_PROJECT_DATA_BUCKET}
    hostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_HOSTS_TABLE}
        AttributeDefinitions:
          - AttributeName: hostId
            AttributeType: S
        KeySchema:
          - AttributeName: hostId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    functionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_FUNCTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: functionId
            AttributeType: S
          - AttributeName: ownerHostId
            AttributeType: S
        KeySchema:
          - AttributeName: functionId
            KeyType: HASH
          - AttributeName: ownerHostId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-jest-plugin
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline # serverless-offline needs to be last in the list

custom:
  authorizer:
    name: auth
    type: token
    resultTtlInSeconds: 0
    identitySource: method.request.header.Authorization
    identityValidationExpression: Bearer (.*)
  webpack:
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      hosts:
        sources:
          - table: ${self:provider.environment.DYNAMODB_HOSTS_TABLE}
            sources: [./seeds/hosts.json]
          - table: ${self:provider.environment.DYNAMODB_FUNCTIONS_TABLE}
            sources: [./seeds/functions.json]
  s3:
    host: localhost
    directory: ./buckets
    port: 4569
